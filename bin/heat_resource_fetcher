#!/usr/bin/env python
# coding=utf-8
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.


'''A tool for fetching resource information for the given stack.'''


from __future__ import print_function
import argparse
import os
import sys
import json
import yaml
from pprint import pprint
import heat.utility as utility

types_mapping = {
    'OS::Neutron::Subnet':'cloudify.heat.subnet',
    'OS::Neutron::Net':'cloudify.heat.network',
    'OS::Neutron::Port':'cloudify.heat.port',
    'OS::Neutron::Router':'cloudify.heat.router',
    'OS::Nova::Server':'cloudify.heat.server',
    'OS::Neutron::FloatingIP':'cloudify.heat.floatingip'
}

stack_name = ""

def get_parameters():
    parser = argparse.ArgumentParser(
        description=__doc__,
        epilog='In current version only Nova and Neutron resources'
        ' are supported.')
    parser.add_argument('--os-auth-url',
                        dest='keystone_endpoint_url',
                        default=os.environ.get('OS_AUTH_URL'),
                        metavar='URL',
                        help='Keystone API endpoint URL')
    parser.add_argument('--os-username',
                        dest='username',
                        default=os.environ.get('OS_USERNAME'),
                        metavar='username',
                        help='username')
    parser.add_argument('--os-password',
                        dest='password',
                        default=os.environ.get('OS_PASSWORD'),
                        metavar='password',
                        help='password')
    parser.add_argument('--os-tenant-name',
                        dest='tenant_name',
                        default=os.environ.get('OS_TENANT_NAME'),
                        metavar='tenant name',
                        help='tenant name')
    parser.add_argument('-s', '--stack-name',
                        required=True,
                        metavar='stack name',
                        help='stack name')
    parser.add_argument('-o', '--output-file',
                        nargs='?',
                        metavar='file',
                        help='output file; unless specified otherwise'
                        ' the output is written to standard output'
                        ' (`-\' is interpreted as standard output)')
    parser.add_argument('-m', '--mappings-file',
                        nargs='?',
                        default='./heat_mappings.json',
                        metavar='file',
                        help='mappings file; unless specified otherwise'
                        ' the output is heat_mappings.json in the script dir')
    parser.add_argument('-i', '--ignore-heat-resources',
                        action='store_true',
                        help='resources seen only by Heat'
                        ' (eg. RouterGateway) will be filtered out')
    parser.add_argument('--include-unsupported-resources',
                        action='store_false',
                        help='resources not supported (eg. volumes)'
                        ' will be included in the output, but only'
                        ' their heat description will be visible'
                        ' (by default such resources are ignored)')
    args = parser.parse_args()

    credentials = [
        ('keystone_endpoint_url', '--os-auth-url'),
        ('username', '--os-username'),
        ('password', '--os-password'),
        ('tenant_name', '--os-tenant-name')
    ]
    for credential, parameter in credentials:
        if getattr(args, credential) is None:
            msg = 'The {} parameter has not been specified and cannot' \
                ' be get from the system environment.'.format(parameter)
            print(msg, file=sys.stderr)
            exit(1)

    return args


def sortMyKeys(keys):
    keys.sort()
    for i in range(len(keys)):
        if(keys[i] == "relationships"):
            rel = keys.pop(i)
            keys.append(rel)
            break
        elif(keys[i] == "imports" or keys[i] == "name"):
            rel = keys.pop(i)
            keys.insert(0, rel)
            break

    return keys

def getFloatingIPFromAddress(heat, addr):
    for res in heat.get('resources'):
        if isinstance(res.get('resource_attributes').values()[0], dict):
            if (res.get('resource_type') == 'OS::Neutron::FloatingIP'):
                for attribute in res.get('resource_attributes').values()[0].keys():
                    if (attribute == 'floating_ip_address' and 
                        res.get('resource_attributes').values()[0].get('floating_ip_address') == addr):
                        return res.get('resource_name')
    return 'NA'

def scan_relationships(types, heat, relationships):
    for res in heat.get('resources'):
        if isinstance(res.get('resource_attributes').values()[0], dict):
            res_name = res.get('resource_name')
            res_id = res.get('resource_id')
            for attribute in res.get('resource_attributes').values()[0].keys():
                if attribute in types:
                    for rel in res.get('resource_attributes').values()[0][attribute]:
                        if rel in relationships:
                            relationships[rel].append({res_name: 'cloudify.relationships.contained_in'})
                        else:
                            relationships[rel] = [{res_name: 'cloudify.relationships.contained_in'}]
                    del res.get('resource_attributes').values()[0][attribute]
                elif attribute == 'addresses':
                    if res_id in relationships:
                        relationships[res_id].append({res.get('resource_attributes').values()[0]['addresses'].keys()[0]: 'cloudify.relationships.connected_to'})
                    else:
                        relationships[res_id] = [{res.get('resource_attributes').values()[0]['addresses'].keys()[0]: 'cloudify.relationships.connected_to'}]
                    for address_att in res.get('resource_attributes').values()[0]['addresses'].values()[0]:
                        if address_att.get('type') == 'floating':
                            
                            relationships[res_id].append({getFloatingIPFromAddress(heat, address_att.get('addr')) : 'cloudify.heat.server_connected_to_floating_ip'})


def add_relationship(res_id, relationships, level):
    if res_id in relationships:
        for rel in relationships[res_id]:
            for target, relation in rel.iteritems():
                write_output("\n{0}   - type: {1} ".format("    " * level, relation))
                write_output("\n{0}     target: {1}".format("    " * level, target))
        write_output("\n{0}   - type: cloudify.relationships.depends_on ".format("    " * level))
        write_output("\n{0}     target: heat_stack".format("    " * level))

def recurse(mappings, heat, level, isListFirstItem, relationships, res_id):
    level = level + 1
    if isinstance(mappings, dict):
        for k in sortMyKeys(mappings.keys()):
            heat_key = k
            if heat_key == "properties":
                heat_key = "resource_attributes"

            if(isinstance(mappings[k], dict) or isinstance(mappings[k], list)):
                if(len(mappings[k]) > 1 or isinstance(mappings[k], dict)):
                    write_output("\n{0} {1}{2}: ".format("    " * level, "-" if isListFirstItem else "  ", k))
                    isListFirstItem = False

                    if "cloudify.heat.heat_stack" in mappings[k].keys():
                        recurse(mappings[k]["cloudify.heat.heat_stack"], heat, level, True, relationships, None)
                        del mappings[k]["cloudify.heat.heat_stack"]
                    if isinstance(mappings[k], dict) and (mappings[k].keys()[0].startswith("OS::Neutron::") or
                        mappings[k].keys()[0].startswith("OS::Nova::")):
                        for heat_node in heat['resources']:
                            for key in mappings[k]:
                                if(isinstance(heat_node, dict) and heat_node["resource_type"] == key):
                                    recurse(mappings[k][key], heat_node, level, True, relationships, heat_node["resource_id"])
                    elif isinstance(mappings[k], dict) and k == "relationships":
                        target = mappings["relationships"].get("target")
			if target == "heat_stack":
                            write_output("\n{0}   - type: {1} ".format("    " * level, mappings["relationships"].get("type")))
                            write_output("\n{0}     target: {1}".format("    " * level, "heat_stack"))
                        add_relationship(res_id, relationships, level)
                    else:
                        recurse(mappings[k], heat[heat_key] if heat_key in heat else heat, level, False, relationships, res_id)
                        write_output("{0} ".format("    " * level))
                else:
                    write_output("\n{0} {1}{2}: ".format("    " * level, "-" if isListFirstItem else "  ", k))
                    isListFirstItem = False
                    recurse(mappings[k], heat[heat_key] if heat_key in heat else heat , level, False, relationships, res_id)
                    write_output( "{0}".format("    " * level))
            else:
                value = mappings[k]
                if (k == "Neutron_config" or k == "Nova_config") and value == "$$$":
                    yamltxt = yaml.dump(heat ,
                        Dumper=yaml.CSafeDumper,
                        default_flow_style=False)
                    yamltxt = yamltxt.rstrip()
                    write_output( "\n{0}   {1} ".format("    " * level, yamltxt.replace('\n',"\n   {}".format("    " * level))))
                elif value.startswith('$'):
                    if value=='$stack_name':
                        value = stack_name
                    else:
                        parts = value[1:].split(":")
                        value = heat
                        for part in parts:
                            if(part in value):
                                value = value[part]
                                if not isinstance(value,dict):
                                    break
                        if(k=='type' and value in types_mapping):
                            value = types_mapping[value]
                    write_output( "\n{0} {1}{2}: {3} ".format("    " * level,
                                              "- " if isListFirstItem else "  ", k, value))
                else:
                    if(k=='type' and value in types_mapping):
                        value = types_mapping[value]
                    write_output( "\n{0} {1}{2}: {3} ".format("    " * level,
                                                  "- " if isListFirstItem else "  ", k, value))
                isListFirstItem = False
    elif isinstance(mappings, list):
        for i in sortMyKeys(mappings):
            if isinstance(i, dict):
                matchedNodes = []
                if(i.keys()[0].startswith("OS::Neutron::" or i.keys()[0].startswith("OS::Nova::"))):
                        for heat_node in heat['resources']:
                            for k in i:
                                if(isinstance(heat_node, dict) and heat_node["resource_type"] == k):
                                    recurse(i[k], heat_node, level, True, relationships, heat_node["resource_id"])
            else:
                write_output( "\n{0} - {1} ".format("    " * level, i))
    else:
        write_output("{0}{1}{2}".format("    " * level, "- " if isListFirstItem else "", mappings))


def main():
    global parameters
    parameters = get_parameters()
    if parameters.output_file is not None:
        if os.access(parameters.output_file, os.R_OK):
            os.remove(parameters.output_file)
        output_file = open(parameters.output_file, 'w')
        output_file.close()
            
    clients = utility.APIClients(
        parameters.keystone_endpoint_url,
        parameters.username,
        parameters.password,
        parameters.tenant_name
    )
    global stack_name
    stack_name = parameters.stack_name
    stack = utility.get_stack_by_name(
        clients.heat(),
        parameters.stack_name)
    stack['resources'] = utility.get_all_stack_resource_info(
        clients,
        stack['id'],
        parameters.ignore_heat_resources,
        parameters.include_unsupported_resources)
    json_data = {}
    try:
        with open(parameters.mappings_file) as input_file:
            json_data = json.load(input_file)
    except IOError as e:
        print('error: ' + str(e), file=sys.stderr)
        sys.exit(1)

    type_prefix = 'cloudify.openstack.'
    relationships = {}
    scan_relationships(['subnets'], stack, relationships)
    recurse(json_data, stack, -1, False, relationships, None)
    write_output("\n\n")

def write_output(text):
    if parameters.output_file is None:
        sys.stdout.write(text)
    else:
        try:
            with open(parameters.output_file, 'a') as output_file:
                output_file.write(text)
        except IOError as e:
            print('error: ' + str(e), file=sys.stderr)
            sys.exit(1)

if __name__ == '__main__':
    main()
